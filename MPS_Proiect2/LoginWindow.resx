<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAYAAAA+s9J6AAAABGdBTUEAALGPC/xhBQAAGkxJREFUeF7t
        nW1sLNdZxwMpJAi5eamKSRwJhOOmS9N2CUnWAanuppXctGK3SVopybJ9AZZNioKy5YNLKuLwYpICbv2B
        bW7SWoJk0w8WVl4cNcmWkCLcJlsgLh+2uElaCVYGVF1Z9MuVuMDA/7Ef5/r6Prb3zDwzO2fm+Ul//cf2
        enZmzjlz3s85z0gn29vb5/d6vfG1tbWfXVxcnJmbm/tQrVarT09P/+HExMQT4+PjT42NjX0DH/0X+D/g
        5xfx+xfx9zY+18Tnf4X+D///c3QenO9Hds9sGMY5nDp16sL19fUiEk2zXC4/i18FrP89oP+B/hs6Df0X
        i47pd/Q3+sze/x48x87POP9X6XuQMN9x+vTpH8PvDCOf9Pv9yXa7/RtIFF/Dj3sJ5v8S1M53zs7OPkPX
        sbm5+TP42TCyzdbW1jgi/G9OTk6+ih+TTnRHaSdBTk1NbeL6midPnnwLfjaM7NDtdsvIcb6KwzQlvKMU
        VCqVJ3Dd78OxYfgJ6nk/sby8/Akc7uQykBTZfVDQ6XRut/qj4RUo0t0F8znhSQr4pWIY6YVyDFjWEt9B
        BSsrK7fCDSM9rK+vT09OTr6GQynSZlKFQqHf6/WuxbFhjA6q99Xr9UdxKEbUHChoNpsP03PAsWEkS7fb
        vRGW9aLnsAqoNAA3jGRotVqfh0mRMc8K5ubmHoAbRnxsbW1dnre6n6uKxeIr1tlvxAJ3XFvxczhR8bQE
        NwwdlpeXPwmzBOgm68owdEA950GYFMlMQ2hhYeF34YYRDmp+h4mRa8TyKleen5+/H24YbtTr9cdgYqQa
        gSjRBWNjYz+sVqt/1Wq1HkQO/QeI3Pcip/kdcvqZfk9/3/v8PknnTFTcomwYw4Ec8ARMjEwJaCfhVCqV
        J9vtdmN9ff3awWDwU/idM/i/t+L/r6PpU2mYxcFFe8M4mhHVAXcSHnK036NWxbhmLNB5cf7r8T334ceR
        JMjFxcUW3DBkePaDGHliUtBoNE70er1rcJw49L0odv8FDhNNkNZqaogk3A8YoC43l5ZObZrxT7kwDhNL
        jDb42zgL1J0mYElEwKDVav3Z9vb2JThOHXgpXILr+1McJvIsbGSNsQPVk6jVEYdxRryd5SKQ2K/AcerZ
        3Ny8MomGHJoOBTfyTq1W68Diimx03mB1dbUC945Op3MbLNaEaF0XOQeR7A5YbAmQcr+0Fj2HhYqM5XL5
        r3Eo3aOKbEGpnEIzImCxJcClpaW74ZlhYWHhMzDpXjUU2MTgHII6D610LUWIqMrsDIK1tbUPwGJ5cfEK
        BUZeQB3tZlgckSnY3NychGeWjY2Nd8JieXZ4ed0AN7IOj0aJJRJxETfz4EUzBVN/htxKbWSd+d0R/WIk
        iCBKgJfBc0NMCTHgUUtGVompUz7wpf9PGxRNr4apP0/fW5SNI2g0Go/ApIAPK6rHXA/PLXE01qC0Mg83
        skYMuSAtC/9xeO6JofvCcsMsoj1HEOd7CG4wNDABJj6rMLJlMTIGDxRWzQVtl6KzQc51McyesSGj3CIa
        cF+ZcYBut/temFZCpOI+rXJnZAS1NzRNRYIbh1Cr1dT25uCFlg3f4cHBYiCHkBWRjgFF/0thai897gYx
        fKZSqTwNEwPYVSsrK7fAjWNYXFy8ByY+Q1fZVCfPOXXq1IUwMXBdNT4+/u9wYwiUhwbSeQxfWV1d/TBM
        Clhn4VxVuDEk7Xb7Tpj4LF21btuu+Uu1WtUqitrb2BEuhajkhrZeqadoFkXxVm/CDUeQeP4YJj5TF1lV
        wFN6vd4vwsRAdRStCkYtfoYjtGAUTCU3zPo8zUzCw57EAHVRrVajPSmMkNCmoTDx2bqo0+ncDjd8Ynp6
        +mWYGKAuWltb+yDcCIlWAw2P/TU8Q6MYZJ3zERkMBrTagPRsXWWNYz7B9YfIibBcLr8AN6Kj8kLc3t5+
        M9zwAa3+QRtArMPc3NwDMPEZu8iGsHnEwsLCvTAxIF1ksyV0QL36Jpj4jF1kjTMeUavVvgITA9JFtiCt
        DqgX0iJY4jN2kU309YhSqfQtmBiQw6pQKHwHbihw+vTpH4VFrhfyviFG2uEAFwPRRRbgumj0F+LlSt1O
        RtpBEfICmBiILrJtnXXhZe7FZz2sbHFgTzh58iStdSIGoousEUAXfqmJz9pB1G/7JriRZvr9/ttgUgA6
        qdvt3gg3lFAaOUO7N9HAfCPNcF+SFIBOsj4pXVZWVm6Fic/aQdZh7wOWCNMJlyzEZ+0g2nLgp+FGmrFE
        mE56vd41MPFZu4irG0aa0aoTcqQxlNCa32mJ0AN48LYYgC6ydU104ecpPmsX2eReD9AaIsXjHQ0leF6m
        +KwdRHXCXO0D6SXceiYFoJOWl5c/ATeU4OcpPmsHWeuoD9iImXSi1Vlv/YQecPr06fNhUgA6iTcUNZSo
        1+u0Vo/4rB1kI2Z8oVgsfhsmBeLQ4pkYhhIaYcKDwA0fqFQqz8DEgHQR3rq2vowCXISMPJWpWq0+CTd8
        QGtmvTWH64DnSOuPis/YRTap1yN4BoQYkC7i8Y5GRJTGjdLMljvghg9ojc5oNpsPw42INBqNL8PEZ+yi
        DVvzxx+4DiIGZAgZ0ZGeq7MQrrbmj0/wLGwxMF1kb99oaJVKbFMYD2m1WoswMUBdxI08Rkjm5uY+BxOf
        rYtsx14P4U09xQANISM80vN0lu0J4iFbW1s0+VMMUFfZjIpwdLvd98HEZ+oq257OUwqFQh8mBqqLKpUK
        7fhrOFIul1+Eic/URTZSxmO4c1cMWFcNBoMJuDEkm5ubKpOrSTaY3mP6/f5VMDFgXdVsNh+CG0NSq9Ue
        h4nP0lU84sbwFa2uCogmlFpuOASaueDU1NR34YbPoChzD0wMYFfZ0vjDMTs7+zxMfIau4vVKDZ/Z2tpS
        We5iT+vr6zfAjUPodrvvh4nPLoxOnjz5FrjhOzwFRgxkV01MTAzgxuFo7Mq7Iyt5ZAjOvcSADqN5ADcO
        0Gq1vgATn1kY8ZA3IytMTk6+BhMDO4wQQa6DG4xmxzyJ+3iNLKG05N5+0aJDNqofcL1NrRhK4kRtZA3F
        7oodTU9PfxOee7RGJu3JZkxkmBhyQ+rEPwHPLZqd8nuyhZczjsa2zQeV14Yanl4kPpOwKpVKL8GNLKO1
        J8JB5W0Rorm5uQdh4rOIImsRzQnc/yRGgijKS0KMIwckNRoNW9MnL8TRmrenrM8Ar9frj8LEe48o2mfi
        EriRF5Q2KBE1Ozv7bNYWDqbuGK6vifccVSsrK7fAjbzBXQxipIgq6g7Z3NycwrH3bGxsvAsWS8mBVKlU
        bGXtvMJLJsQWuaDA91kAmhOjD5ENesg73W63DJMih5qoM9u3XLHX612rPbhBUGDr9xg7cD+fFEk0FczN
        zT2Q9rc+NY7wtnDSPagqb906xjFQYwpMjCzKCpaWlu5OW2KkonlCL6MdVavVJ+CGcQZKFAkUv/YrQJy/
        b9STVgeDwRVx9fsdJhobatvOGSJx9h8eJeTCz9G41qRyRxQ5L6IugVKp9DJ+FK8pRll/oHE03ICSeELc
        ExXTqA+z3++/HT+rQXtqUEut5vovIUSLZV0BN4yj4aUSR5YQ9wuJ8ikUW+9fXV29mdZvoZcErS6OXPvi
        g6Lf07XTXDzkdB+h8Z0jTnT7FeDabelCY3jSlBAzIEuARjhGXTTNiKwIakQDRbzLYZYQQ4jW9UEx2ZYs
        NKJDrXnaSzhkXeVy+QXrhjDUSbo/zVdRQxLcMOIBCVFlB+CsyjbOMWKBGhZoqBkOrW44pGicLE+BMoxw
        0OiVTqdzR7FY/DZ+FCOa6XjRUMDl5eVP4tgwhoPe3lz3s1xPUTRelFuaDUOGRqQUCoXv4FCMRCYVBdZl
        YZwFNaFzUUmKMKYYZHtMGDtQfW9paem3cShGFFO8onGtcCOPUM7Hic/qeyMUF/uNPEGJr91u34VDS3zp
        UEAzPuBGHuCijyW+lMmWu88BGxsb77bxnumVrbKWYba3ty9uNpu0p4EY+KZ0yHLCjLK6uvphWBaKnnQP
        AeXktP4MbWBDY1ZpiUCq29LyF51O53bSwWP6O32OPk/7RlQqlaemp6df5o03d87L3zFSpW21OSMi1AFM
        kQ2HYoCnWEGxWNygcZbUX4ki2g00Az2uKUB03sFgcDkt7Iu68q2UWPc9t8QSJ71Y4EZW4M52L3I/ivCL
        i4utbrd749bW1mX4XWqgYjzq0VdTboqc9zH8KrZnSi8BuOE7NNEWb9SkFuwNpWq1+iS9JHiZDO+gXBnF
        3NtQrP1L/Cjeo6sajcaX4Ibv8N7zacz9aEHfeWp0iKtIOUpo8Svk5PfQshX4Ubr/IzUzM/N1uOEzFLH5
        TSoG8ihEDR5UxPQ1twsL1S1pHdOpqalX8aP4bPaLXk5ww2doGszExMQAh2IgJy2etPpOHOceKrYuLCx8
        BofnlE4o8dHfcWz4DC16Cxt58bNUKvVoyhOOjUM4derUBXhhvhV+If/K8B0U9T4NExNFUqJ+Ou1l6Q3D
        CxD5H4eJCSMJUYc31X1wbBj5gkZTFIvFV3AoJo64hWrMfbZzkJFbeMn0kdT/qHHBEp+Ra2jmAyzxBNho
        NB62tU+M3LO+vv5LsEQTYKlUeskaXAwDrK2tfQiWZAIMaNYB3DAMJIY7YFJCiUUoej5i02gMg+GlJ8TE
        EoMCm81tGPvgIqiUWNRVr9cfs9zPMPZBe6rDkqgDBkjsN8ENT6CXJa3ERjNRaLYMrZbAujlJUSZBjXY0
        z5IvLTvg4V4Hiz0BTk9Pf5MGfePYSDk0A4XWg0WYvYQfxfActWjoIrVfeN+PjId9FSzuBLgzpw9upBia
        lkZLbAw7FSpNogTpZfsCd4bHngCt+Jl+fFqS5ChRzk27eOE4/VA5n1f7Em9GSQFy2rfBjZRCdayws/LT
        rGazeSL1KynwsgbiDWiIBntb62e6yUrud4TSmwm0Wq0vwKSLVhGVz+FGiuFNV8Xwy5gCWkkPnh747Sdd
        rIqsASb9UB8tTAy/rCo1QyJ7vd71sNiKH7TqF9xIMTnKAc/R6u5q8KOD+1LiSoABLVALN1JM3KUgDxT0
        +/2fh4+GGBtiaPbDbXAjxXB/sBR+eRNlRMmDatr9MOmCosoSoCfwTrxSGOZOXCRPjjgn5loC9AMa2gUT
        wzCv4pJB/HA/XSwJ0OqAXhFbY5yvmp2dfR4eP/V6nfrrxIuIItq+C254QJLT03xT7MPbeIVs8cujiIYD
        wQ1PmJmZ+VuYGJZ5F/eXxkNcxVDe9szwhMFgMAETw9K0q9hW9Gs0Gl+GiV8aQUEWtxbLMmnYriDtojmT
        cF24NVT8wggKeAFgwyPGxsZ+CJPCM4wCVEUeojl7NMseOcjFEXXJIRL/Trk6rf7ADSrS9YWVfr+h8oMn
        0QDYMjwToKh+IQL1Imh/hMiC9iLspbT8A09w1aqSBGnacm5lZeUWmHSdoUTLdsB1WFhYuBcmflFYZWFA
        Nr1BUQl/FIfiPZqOVKoS4B7cRy1dr7N4VlF0eO0W1caY6enpb8C9hYrQo9zEJgvCy4v2xk8lmmGr0t5R
        q9W+AhO/IKQCFG283Qui3+8XYNZJHVGqRTVlaOU3mHjdrqLSEjw8cTTG+LwuTEKLV2VevPxJ2lEJ52az
        +TA8PNqDc33ukB/lNm5Zkw8jo3gOq3j9IRQO7WFJ3LrqJZYAdYUSxRQ81SDM1dpCQjdAaXdJcNO2d8TR
        MGXyA9pODyZdv5NCddx3Op0aTDxhGNHuSHDv4AYkS4CK8qlrimf0iPfhonK5/CLcGc2IF/i4RGHMy3bk
        VmluFT0IjeCBifcRQsOzsrLyUZh0klBCrurdBp2UAGMYIWSCfHshT0xMDGDivbjItV6o9vYvFAp9uFdQ
        JElgBfFcKrEJr4pwS654Py4aerK69lzBNA5LOgpKgFlcuj0t4lXZvIKLz+L9uGjodpFisbgBE0/iKhoZ
        D/cGGl5kCTBWedk2gGu+ACbdj5OmpqY24UeDXIum5IsnCKEAldrL4N5gY0HjlY+54B5KqwjQS+jH4Yej
        OUZ0bm7uAbg3aPUHmWQhbj0O9xalpT1p7uylcBnuD5P+MYwCn3Y4nZ2dfQ4m3YdJQaMYqkijXdrt9p20
        DihlLsgUHqTlGcPGS17mXrw/BwXr6+s0+F9Gc76gT52xlgDjU7VafQqR7gYcJwYS3wTv3CVeE4lKaa51
        083NzUmYeD4HBSsrK++FH4pWt4Q305QoksCke1ARtYbRGxQP/iM50kdp5s0oSkI8ZWjYeOy0vyDu580w
        6TwuCpDZ/Tr8XPhtpZIIkf0vwlNP3Ft48Wx7IyEo4cNc4zA1HtK44GGRzuGiALnw3fBz4Uqz9E/OouIA
        PNUsLy//Gky8fg0hh30SbiQEFy1DZSLcJTcUCt1XAdLag/CzwQ1cCJP+wVmVSoWKd6mGlxoQr19DPjyD
        rDE/P//7MDE8hhFP2TsWhcwqKJfL57YSowx/K0z6B2clXQkPQ5xLt/s4JCsjiOExrBBuX4Mfi8ImqEGh
        UDh3bSVcQBcm/YOTPFmuILY99UulUg9uJEy/36fGFY32jGOhbg6Y9L/DKkA6eR1+Bm7Bkj7sLF9mSnBi
        Ee8hrFDEoNEUxgjodrs3wsRwcRFPWToSjQ77sbGxH8DPQE3KMPHDrvKlcx6J8GWYeA9h1W6374IbIyDJ
        RKg0m4Jy7TNwWVj6oJO4c9QL4uobtIQ4Grg4KoaJo46FB6FI/zu0kBOehO+CnOtimPhBV/H0Jy/gxCLe
        R1QNPV/MUEOjtXtmZubr8GNRaJihtpPvw3fRysZZ3sD9mNI9qMjHVQR8J2rioDGl8GPhMbDiOYZVsVik
        YZK7aKRqEp/HK44bWxhVlhCThTaqgYVqIXVZhlNjOhOqgH8OfwPxQ67yoW/wINyIpNGsfai4/9VICDzv
        MLspBahTvh0+LNI5nIRM62NwtRHhe/ISXnzWEmKGQJ3847Bhw5SmFV0PdyFyfJmfn6dF1PS2fvJ9kLJi
        R++hmpqaen1ycvJ70PfZDxP9/ThJ//e9Uqn0LRpSRXWbpLuKaPWExcXFFg36QH3nn3A9r1cqlafpd6NY
        WYHWg6FrwKEYHiRc63OuY5zxeboX8Xwuwovil+E7FUxa+0X8kIt4oqPXJJEQkxY3pccKtUoiHtFGJ+I1
        7Ilmq7jO3dOAFhijvSSo/k91OcowqPUaJaAr+SNOINek1ePFe3QQbYq7O31Kax3FUbzp4gAB9g5YphIi
        3vbPq+yLJ0CJyjEOeb0VHqHUtUWbol5BjRK0clTkCFcoFI5fOcojUIz5BVimEiK35qmDIvZ3YeJ3HiZq
        hYzrpZAEyFE11l+iZV9+krLVq+mHA390Fko8NI4uU2QxIfLcSTUWFhY+CxO/6zj5HGc0VmPHOf4TvpOt
        0kYvkSMa72SaObjFLEsJke5FBa7bSd8xrLxaAGyPwe4WadL9OAlVhGfgO5309DaKHMl8mEEflqwlROTw
        18IjozHgHzmzd2uP8oga8X5ctLi4uLs9WrlcXoNpRLBM0+12aVWsTCRElH4+BY8MXuBLMPE7hlW1Wn0a
        7hW4Zkoz4v24CHGqDN9pGaUBpJEil0+zJqKQlYSIxEMTmSOjFRl9aqDBtb4JJt6Hq/YXxSNHKt9W144C
        6r4fgHmdELUSYb1eV1kQzKdNgvAipmUUxftw0cGVJyJHKJ7cmBt8T4ha9TDUaT4NE7/DRXweLxhmQMIw
        OmsABVLkv8LEDw4rXmsjV/AAYS8TouMg5UNZ3x2sL36Hi2ioHTz1oCh6Pky8B1dxjrpLoVD4e1ikyISH
        eGZiYo7gMbdeJcSpqalX4SpoLo/pQ+s6d8OJ1++qs7pmUK7/E1jkiOT7MKSw+JYQOfdSQ2v/yqWlpd3m
        +hSjtB0aLQT2AvwMKJo2YJEj0Vll3JyBOhZNmRGfS5qEIFIfoUKzI2Di97loYmJiC55aeKqbeO2uwov7
        7Eneq6ur18FU3uS40KvguSTtdUTeZUsd1C8pzMXvdJXWIII44BeYeN2u4pn/Z0DCuQimFnl8HIakBb0t
        UdT4GxyKz2YUQp3/n7WLoALid7sKxb2/g6cOjtPiNbsK9/giXETzDU5bTFHWnVtw/1dSNwC1Grdarc8n
        Lcr1aGgVrmN3rlrMKKxE/YbiyrGjoFUXJJ1TFN2j0Wh8ESb+U1hRB/6W2zZThqdwMVKMB2GE+PilUUz8
        PQiK2gWthqc9HVpS5DFs4j9F1fj4+A+azeYJKlPTWw767CjUbrd/C/f5/jwXl2NGvT5ME5E53ohhqiyK
        mzuinL1UKlHXnXhdYTXM8i+pbVTQFq2/MhgMrsCxoQQir8aS8JnWsQ1PyCnuhIn/nFWtra3dBDcUoHow
        THzOpiF3KeOR7LnJDfeUhcWp0kK5XKaWP/E55128Js3xcMuNeJIsy4qmOqzrrECWSTk1NBWLxX+EiSfK
        qvIyHzIJ4thqznfxqKLh4bJ97oql1mqqw8bGxrtg4jPOqYJQk5Z5ULJ0wsyqu7srlaEADRiAic85b4oU
        rxqNxiMw8cRZFLcOG0pMTk6+BhOfdV5E/ePwaFBnKUz8gqzJudxuHAlPbctdtWZPqBu/BNdhZnfXUvGL
        sqRDx/QZoeG1Y/KYEAP1YXc83Eb6ssyIp+QYyuQtIVIxPLZGPp64msmHOdRoBiM03A+b+YSI6tuzsS/f
        SLkFr1EiXoSv4pWkjRih4lmlUnkKh2IYeK6Ax84mB7ckZuLNhrfXmY37jdjh3YozkysWi8VXkpq3eQ70
        ZkNibOLQ2wfKYx2NhKG4wws7+Rp3AtqVKVWbIHW73fc0Go02DumhHvdgU/Hg5wHcGDGrq6tVLqbuxZ39
        EsMuBknfLarZbH6x1+tdg+P0gqx5HEWO9yCOfwoJ849KpVJ3fHz83/Cngze8/yFo6dDz0uTiWq1GWyR/
        LK/LM6YZyh0Rud+N8PnVVqv1uZmZmRcQZv9xYB/AOOLO3jnfEO0bODk5uYmS0vO4lgc6nc6t/X5/Mp5G
        l/PO+3+hrVmTXKfnwwAAAABJRU5ErkJggg==
</value>
  </data>
</root>